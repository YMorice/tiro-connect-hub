
import React, { createContext, useContext, useState } from "react";
import { User } from "../types";
import { toast } from "@/components/ui/sonner";

interface AuthContextType {
  user: User | null;
  loading: boolean;
  login: (email: string, password: string) => void;
  register: (
    email: string, 
    password: string, 
    name: string, 
    role: "student" | "entrepreneur" | "admin", 
    userData?: Record<string, any>
  ) => void;
  logout: () => void;
  updateProfile: (data: Partial<User>) => void;
}

// Mock users for demonstration
const mockUser: User = {
  id: "1",
  email: "entrepreneur@example.com",
  name: "John Entrepreneur",
  role: "entrepreneur",
  bio: "I'm a startup founder looking for talented students to help with my projects.",
  createdAt: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000), // 30 days ago
};

const mockStudentUser: User = {
  id: "2",
  email: "student@example.com",
  name: "Jane Student",
  role: "student",
  bio: "Design student with a passion for UI/UX",
  skills: ["UI/UX Design", "Figma", "Adobe XD"],
  createdAt: new Date(Date.now() - 15 * 24 * 60 * 60 * 1000), // 15 days ago
};

const mockAdminUser: User = {
  id: "3",
  email: "admin@example.com",
  name: "Admin User",
  role: "admin",
  createdAt: new Date(Date.now() - 60 * 24 * 60 * 60 * 1000), // 60 days ago
};

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [user, setUser] = useState<User | null>(mockUser);
  const [loading, setLoading] = useState(false);

  const login = (email: string, password: string) => {
    setLoading(true);
    
    // Simulate API call
    setTimeout(() => {
      if (email === "entrepreneur@example.com" && password === "password") {
        setUser(mockUser);
        toast.success("Logged in successfully");
      } else if (email === "student@example.com" && password === "password") {
        setUser(mockStudentUser);
        toast.success("Logged in successfully");
      } else if (email === "admin@example.com" && password === "password") {
        setUser(mockAdminUser);
        toast.success("Logged in successfully");
      } else {
        toast.error("Invalid credentials");
      }
      setLoading(false);
    }, 1000);
  };

  const register = (
    email: string, 
    password: string, 
    name: string, 
    role: "student" | "entrepreneur", 
    userData?: Record<string, any>
  ) => {
    setLoading(true);
    
    // Simulate API call
    setTimeout(() => {
      const newUser: User = {
        id: "3", // In a real app, this would be generated by the backend
        email,
        name,
        role,
        createdAt: new Date(),
        ...userData,
      };
      setUser(newUser);
      toast.success("Account created successfully");
      setLoading(false);
    }, 1000);
  };

  const logout = () => {
    setUser(null);
    toast.success("Logged out successfully");
  };

  const updateProfile = (data: Partial<User>) => {
    if (!user) return;
    
    setUser({
      ...user,
      ...data,
    });
    
    toast.success("Profile updated successfully");
  };

  return (
    <AuthContext.Provider
      value={{
        user,
        loading,
        login,
        register,
        logout,
        updateProfile,
      }}
    >
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error("useAuth must be used within an AuthProvider");
  }
  return context;
};
